---
title: Making a component add-on OSGi-compatible
order: 17
layout: page
---

= Making a component add-on OSGi-compatible

In order to use a component's jar as an OSGi bundle, some additional headers in
the manifest file should be added. These headers describe the bundle and
provide information such as identity, version, and so on. Some of the headers
are as follows.

- *Bundle-SymbolicName* is the only required header. It specifies a unique
  identifier for the bundle, based on the reverse domain name convention. e.g.
  `com.vaadin.flow.component.button`
- *Bundle-Name* defines a human-readable name. e.g. vaadin-button-flow
- *Bundle-License* specifies the license information of bundle. e.g.
  \http://www.apache.org/licenses/LICENSE-2.0
- *Bundle-ManifestVersion* indicates the OSGi specification to use for reading
  this bundle. The value 1 indicates OSGi release 3, and the value 2 indicates
  OSGi release 4 and later.
- *Bundle-Version* specifies the version of this bundle which consists of up to
  four parts separating by dots.
- *Import-Package* declares the imported packages for this bundle.
- *Export-Package* contains a declaration of exported packages.
- *Require-Capability* specifies that this bundle requires other bundles to
  provide a capability e.g. osgi.ee;filter:="(&(osgi.ee=JavaSE)(version=1.8))"


Although the headers can be added to MANIFEST.MF manually, it is recommended to
use a tool to create them. Here two tools, both maven plugins, are briefly
introduced.

== Bnd maven plugin

This plugin generates required manifest entries based on specified instructions
which can be declared in a file (with default name of bnd.bnd) or in the
plugin's configuration in the pom. It also set default values for some headers
derived from pom elements. For example, `Bundle-SymbolicName` is set to
`artifactId`, and `Bundle-Version` is deducted from artifact version. The
following is an example of the usage of the plugin.

[source, xml]
----
<plugin>
    <groupId>biz.aQute.bnd</groupId>
    <artifactId>bnd-maven-plugin</artifactId>
    <executions>
        <execution>
            <goals>
                <goal>bnd-process</goal>
            </goals>
        </execution>
    </executions>
    <configuration>
        <bnd><![CDATA[
             Private-Package: foo.*
             ]]>
        </bnd>
    </configuration>
</plugin>
----
More information about this plugin can be found
https://github.com/bndtools/bnd/tree/master/maven/bnd-maven-plugin[here]

== Apache Felix Maven Bundle Plugin

This plugin is based on Bnd tool. However, it is easier to use. Although the
values of the required entries in the manifest file can be set manually, this
plugin generates reasonable default values for various headers. The following is
an example of its usage.

[source, xml]
----
<plugin>
    <groupId>org.apache.felix</groupId>
    <artifactId>maven-bundle-plugin</artifactId>
    <extensions>true</extensions>
    <executions>
        <execution>
            <id>bundle-manifest</id>
            <phase>process-classes</phase>
            <goals>
                <goal>manifest</goal>
            </goals>
        </execution>
    </executions>
    <configuration>
        <instructions>
            <Export-Package>org.foo.myproject.api</Export-Package>
            <Private-Package>org.foo.myproject.*</Private-Package>
            <Bundle-Activator>org.foo.myproject.impl1.Activator</Bundle-Activator>
        </instructions>
    </configuration>
</plugin>
----

With these instructions, the plugin generates for instance `Bundle-Version`
deducted from `${pom.version}`, `Bundle-Name` set to `${pom.name}` and
`Bundle-SymbolicName` computed from `groupId` and `artifactId`. The full
documentation of this tool can be found
http://felix.apache.org/documentation/subprojects/apache-felix-maven-bundle-plugin-bnd.html[here].

After generating the MANIFEST.MF file, using either of the tools, it should be
added to the output jar file. This job can be done by configuring
`maven-jar-plugin` like this:

[source, xml]
----
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-jar-plugin</artifactId>
    <configuration>
        <archive>
            <manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF</manifestFile>
        </archive>
    </configuration>
</plugin>
----

[NOTE]
Static resources do not work in OSGi environment for now and it is
required to unpack them in the application project.
